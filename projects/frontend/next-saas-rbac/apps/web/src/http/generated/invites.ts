/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Next.js SaaS
 * Full-stack SaaS app with multi-tenant & RBAC.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'


/**
 * @summary Create an new invite
 */
export const createInviteParams = zod.object({
  "slug": zod.string()
})

export const createInviteBody = zod.object({
  "name": zod.string(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING']))
})

/**
 * @summary Get all organization invites
 */
export const getInvitesParams = zod.object({
  "slug": zod.string()
})

export const getInvitesResponse = zod.object({
  "invites": zod.array(zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable()
}).nullable()
}))
})

/**
 * @summary Get an invite
 */
export const getInviteParams = zod.object({
  "inviteId": zod.string()
})

export const getInviteResponse = zod.object({
  "invite": zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "avatarUrl": zod.string().url().nullable()
}).nullable(),
  "organization": zod.object({
  "name": zod.string()
})
})
})

/**
 * @summary Accept an invite
 */
export const acceptInviteParams = zod.object({
  "inviteId": zod.string().uuid()
})

/**
 * @summary Reject an invite
 */
export const rejectInviteParams = zod.object({
  "inviteId": zod.string()
})

/**
 * @summary Revoke an invite
 */
export const revokeInviteParams = zod.object({
  "slug": zod.string(),
  "inviteId": zod.string().uuid()
})

/**
 * @summary Get all pending invites
 */
export const getPendingInvitesResponse = zod.object({
  "invites": zod.array(zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "avatarUrl": zod.string().url().nullable()
}).nullable(),
  "organization": zod.object({
  "name": zod.string()
})
}))
})


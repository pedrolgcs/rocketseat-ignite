/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Next.js SaaS
 * Full-stack SaaS app with multi-tenant & RBAC.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'

/**
 * @summary Health check
 */
export const healthCheckResponse = zod.object({

})


/**
 * @summary Get authenticated user profile
 */
export const getProfileResponse = zod.object({
  "user": zod.object({
  "id": zod.string(),
  "name": zod.string().nullable(),
  "email": zod.string(),
  "avatarUrl": zod.string().url().nullable()
})
})


/**
 * @summary Create an new account
 */
export const createAccountBodyPasswordMin = 6;


export const createAccountBody = zod.object({
  "name": zod.string(),
  "email": zod.string().email(),
  "password": zod.string().min(createAccountBodyPasswordMin)
})


/**
 * @summary Authenticate with e-mail and password
 */
export const authenticateWithPasswordBody = zod.object({
  "email": zod.string().email(),
  "password": zod.string()
})


/**
 * @summary Request password recovery
 */
export const requestPasswordRecoveryBody = zod.object({
  "email": zod.string().email()
})


/**
 * @summary Authenticate with github
 */
export const authenticateWithGithubBody = zod.object({
  "code": zod.string()
})


/**
 * @summary Reset password
 */
export const resetPasswordBodyPasswordMin = 6;


export const resetPasswordBody = zod.object({
  "code": zod.string(),
  "password": zod.string().min(resetPasswordBodyPasswordMin)
})


/**
 * @summary Get details from organization
 */
export const getOrganizationParams = zod.object({
  "slug": zod.string()
})

export const getOrganizationResponse = zod.object({
  "organization": zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "slug": zod.string(),
  "domain": zod.string().nullish(),
  "avatarUrl": zod.string().url().nullish(),
  "shouldAttachUsersByDomain": zod.boolean().optional(),
  "ownerId": zod.string().uuid(),
  "createdAt": zod.string().datetime(),
  "updatedAt": zod.string().datetime()
})
})


/**
 * @summary Update organization details
 */
export const updateOrganizationParams = zod.object({
  "slug": zod.string()
})

export const updateOrganizationBody = zod.object({
  "name": zod.string(),
  "domain": zod.string().nullish(),
  "shouldAttachUsersByDomain": zod.boolean().optional()
})


/**
 * @summary Shutdown organization
 */
export const shutdownOrganizationParams = zod.object({
  "slug": zod.string()
})


/**
 * @summary Get organizations where user is a member
 */
export const getOrganizationsResponse = zod.object({
  "organizations": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "slug": zod.string(),
  "domain": zod.string().nullish(),
  "avatarUrl": zod.string().url().nullish(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING']))
}))
})


/**
 * @summary Create an new organization
 */
export const createOrganizationBody = zod.object({
  "name": zod.string(),
  "domain": zod.string().nullish(),
  "shouldAttachUsersByDomain": zod.boolean().optional()
})


/**
 * @summary Get user membership on organization
 */
export const getMembershipParams = zod.object({
  "slug": zod.string()
})

export const getMembershipResponse = zod.object({
  "membership": zod.object({
  "id": zod.string(),
  "organizationId": zod.string(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "userId": zod.string().uuid()
})
})


/**
 * @summary Transfer organization ownership
 */
export const transferOrganizationParams = zod.object({
  "slug": zod.string()
})

export const transferOrganizationBody = zod.object({
  "transferToUserId": zod.string().uuid()
})


/**
 * @summary Create an new project
 */
export const createProjectParams = zod.object({
  "slug": zod.string()
})

export const createProjectBody = zod.object({
  "name": zod.string(),
  "description": zod.string()
})


/**
 * @summary Get all organization projects
 */
export const getProjectsParams = zod.object({
  "slug": zod.string()
})

export const getProjectsResponse = zod.object({
  "projects": zod.array(zod.object({
  "id": zod.string().uuid(),
  "description": zod.string(),
  "name": zod.string(),
  "slug": zod.string(),
  "avatarUrl": zod.string().nullable(),
  "organizationId": zod.string().uuid(),
  "ownerId": zod.string().uuid(),
  "createdAt": zod.string().datetime(),
  "owner": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "email": zod.string(),
  "avatarUrl": zod.string().nullable()
})
}))
})


/**
 * @summary Delete a project
 */
export const deleteProjectParams = zod.object({
  "slug": zod.string(),
  "projectId": zod.string().uuid()
})


/**
 * @summary Get project details
 */
export const getProjectParams = zod.object({
  "orgSlug": zod.string(),
  "projectSlug": zod.string()
})

export const getProjectResponse = zod.object({
  "project": zod.object({
  "id": zod.string().uuid(),
  "description": zod.string(),
  "name": zod.string(),
  "slug": zod.string(),
  "avatarUrl": zod.string().nullable(),
  "organizationId": zod.string().uuid(),
  "ownerId": zod.string().uuid(),
  "owner": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "email": zod.string(),
  "avatarUrl": zod.string().nullable()
})
})
})


/**
 * @summary Get all organization members
 */
export const getMembersParams = zod.object({
  "slug": zod.string()
})

export const getMembersResponse = zod.object({
  "members": zod.array(zod.object({
  "id": zod.string().uuid(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "userId": zod.string().uuid(),
  "name": zod.string().nullable(),
  "email": zod.string().email(),
  "avatarUrl": zod.string().url().nullable()
}))
})


/**
 * @summary Update a member
 */
export const updateMemberParams = zod.object({
  "slug": zod.string(),
  "memberId": zod.string().uuid()
})

export const updateMemberBody = zod.object({
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING']))
})


/**
 * @summary Remove a member from an organization
 */
export const removeMemberParams = zod.object({
  "slug": zod.string(),
  "memberId": zod.string().uuid()
})


/**
 * @summary Create an new invite
 */
export const createInviteParams = zod.object({
  "slug": zod.string()
})

export const createInviteBody = zod.object({
  "name": zod.string(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING']))
})


/**
 * @summary Get all organization invites
 */
export const getInvitesParams = zod.object({
  "slug": zod.string()
})

export const getInvitesResponse = zod.object({
  "invites": zod.array(zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable()
}).nullable()
}))
})


/**
 * @summary Get an invite
 */
export const getInviteParams = zod.object({
  "inviteId": zod.string()
})

export const getInviteResponse = zod.object({
  "invite": zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "avatarUrl": zod.string().url().nullable()
}).nullable(),
  "organization": zod.object({
  "name": zod.string()
})
})
})


/**
 * @summary Accept an invite
 */
export const acceptInviteParams = zod.object({
  "inviteId": zod.string().uuid()
})


/**
 * @summary Reject an invite
 */
export const rejectInviteParams = zod.object({
  "inviteId": zod.string()
})


/**
 * @summary Revoke an invite
 */
export const revokeInviteParams = zod.object({
  "slug": zod.string(),
  "inviteId": zod.string().uuid()
})


/**
 * @summary Get all pending invites
 */
export const getPendingInvitesResponse = zod.object({
  "invites": zod.array(zod.object({
  "id": zod.string().uuid(),
  "email": zod.string().email(),
  "role": zod.enum(['ADMIN']).or(zod.enum(['MEMBER'])).or(zod.enum(['BILLING'])),
  "createdAt": zod.string().datetime(),
  "author": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullable(),
  "avatarUrl": zod.string().url().nullable()
}).nullable(),
  "organization": zod.object({
  "name": zod.string()
})
}))
})


/**
 * @summary Get billing information from organization
 */
export const getOrganizationBillingParams = zod.object({
  "slug": zod.string()
})

export const getOrganizationBillingResponse = zod.object({
  "billing": zod.object({
  "seats": zod.object({
  "amount": zod.number(),
  "unit": zod.number(),
  "price": zod.number()
}),
  "projects": zod.object({
  "amount": zod.number(),
  "unit": zod.number(),
  "price": zod.number()
}),
  "total": zod.number()
})
})


